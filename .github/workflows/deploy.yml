name: Deploy To EC2

on:
  push:
    branches:
      - main

jobs:
  Deploy:
    runs-on: ubuntu-latest
    steps:
      - name: application.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_PROPERTIES_ECHO_TEST }}" > ./application.yml

      - name: application-test.yml 파일 만들기
        run: echo "${{ secrets.APPLICATION_TEST_PROPERTIES_ECHO_TEST }}" > ./application-test.yml

      - name: application-test.yml 파일 내용 확인
        run: cat ./src/main/resources/application-test.yml

      - name: application.yml 파일 내용 확인
        run: cat ./src/main/resources/application.yml


#      - name: Github Repository 파일 불러오기
#        uses: actions/checkout@v4
#
#      - name: JDK 17버전 설치
#        uses: actions/setup-java@v4
#        with:
#          distribution: temurin
#          java-version: 17
#
#      - name: application.yml 파일 만들기
#        run: echo "${{ secrets.APPLICATION_PROPERTIES }}" > ./src/main/resources/application.yml
#
#      - name: 테스트 및 빌드하기
#        run: ./gradlew clean build
#
#      - name: AWS Resource 에 접근할 수 있게 AWS credentials 설정
#        uses: aws-actions/configure-aws-credentials@v4
#        with:
#          aws-region: ap-northeast-2
#          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
#          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
#
#      - name: ECR 에 로그인하기
#        id: login-ecr
#        uses: aws-actions/amazon-ecr-login@v2
#
#      - name: Docker 이미지 생성
#        run: docker build -t github-actions-practice-egpark .
#
#      - name: Docker 이미지에 Tag 붙이기
#        run: docker tag github-actions-practice-egpark ${{ steps.login-ecr.outputs.registry }}/github-actions-practice-egpark:latest
#
#      - name: ECR에 Docker 이미지 Push 하기
#        run: docker push ${{ steps.login-ecr.outputs.registry }}/github-actions-practice-egpark:latest
#
#      - name: 압축하기
#        run: tar -czvf $GITHUB_SHA.tar.gz appspec.yml scripts
#
#      - name: S3에 프로젝트 폴더 업로드하기
#        run: aws s3 cp --region ap-northeast-2 ./$GITHUB_SHA.tar.gz s3://github-actions-practice-egpark/$GITHUB_SHA.tar.gz
#
#      - name: Code Deploy를 활용해 EC2에 프로젝트 코드 배포
#        run: aws deploy create-deployment
#          --application-name github-actions-practice-egpark
#          --deployment-config-name CodeDeployDefault.AllAtOnce
#          --deployment-group-name Production
#          --s3-location bucket=github-actions-practice-egpark,bundleType=tgz,key=$GITHUB_SHA.tar.gz